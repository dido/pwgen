#!/usr/bin/env ruby
# Generate a password by rolling dice
require 'pwgen/xrandom'
require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: pwgen [options]"

  opts.on("-k", "--keep-distribution", "Keep the original distribution (will use the same transition probabilities from the matrix)") { options[:keep_distribution] = true }
  opts.on("-l", "--length=length", Integer, "Password length") {|v| options[:length] = v }
  opts.on("-n", "--numbers=numbers", Integer, "Numbers in password") {|v| options[:numbers] = v }
  opts.on("-C", "--caps=MANDATORY", Integer, "Number of letters to capitalize") {|c| options[:caps] = c }
  opts.on("-d", "--dice=MANDATORY", Integer, "Use dice instead of /dev/random") {|d| options[:dice] = d }
  opts.on("-D", "--debug", "Turn on debugging") { options[:debug] = true }
end.parse!

rng = PWGen::XRandom.new(options[:dice] || 0)
matrix = {}
if !ARGV[0].nil?
  matrix = File.open(ARGV[0]) {|fp| eval(fp.read) }
else
  # Generate a default matrix of each letter
  abc = "abcdefghijklmnopqrstuvwxyz"
  h = {}
  abc.each_char {|c| h[c] = 1 }
  matrix[:start] = h
  abc.each_char {|c| matrix[c] = h }
end
pwl = options[:length] || 12
ncaps = options[:caps] || 0
nums = options[:numbers] || 0
state = :start
output = ""
while output.length < pwl do
  p state if options[:debug]
  nextstate = nil
  state = :start if matrix[state].nil?
  s = matrix[state].clone
  s.each_key {|k| s[k] = 1 } unless options[:keep_distribution]
  nextstate = rng.randval(s)
  p [:nextstate, nextstate] if options[:debug]
  p [:ebits, rng.ebits]  if options[:debug]
  if nextstate.nil?
    state = :start
  else
    output << nextstate
    state = nextstate
  end
end

output = output[0,pwl]
choices = (0..output.length).to_a
capletters = []
ncaps.times do
  choice = rng.randnum(choices.length-1)
  capletters << choices[choice]
  choices.delete(choices[choice])
end
capletters.each { |choice| output[choice] = output[choice].capitalize }
nums.times do
  pos = rng.randnum(output.length)
  num = [rng.randnum(10) + 0x30].pack("c")
  output[pos] = num
end
puts "Password: #{output}"
puts "Entropy: #{rng.randombits}"

